/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    quick-tap-ms = <150>;
    tapping-term-ms = <250>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <250>;
        };

        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_shift";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
        };

        bksp_del: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        bdlt: bksp_del_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BKSP_DEL_LAYER_TAP";
            bindings = <&mo>, <&bksp_del>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        com_scln: com_scln {
            compatible = "zmk,behavior-mod-morph";
            label = ",;";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pd_cln: pd_cln {
            compatible = "zmk,behavior-mod-morph";
            label = ".:";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        slash_question {
            bindings = <&kp SLASH>;
            key-positions = <27 28>;
            layers = <0>;
        };

        bslash_pipe {
            bindings = <&kp BACKSLASH>;
            key-positions = <27 28>;
            layers = <2>;
        };

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <1 12 22>;
        };

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <8 17 26>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 14>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 13>;
        };

        hold_space {
            bindings = <&kp SPACE>;
            key-positions = <23 32>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        toggle_nav {
            bindings = <&tog 4>;
            key-positions = <11 2 13>;
            layers = <0 2>;
            require-prior-idle-ms = <350>;
        };

        js_doc {
            bindings = <&js_doc>;
            key-positions = <28 27 26>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 12 16 17>;
        };

        screen_shot {
            bindings = <&kp LS(LG(N5))>;
            key-positions = <0 11>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <4 14 5 15>;
        };

        bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <32 33 34 31>;
        };

        reset {
            bindings = <&sys_reset>;
            key-positions = <30 29 36 35>;
        };

        globe {
            bindings = <&kp GLOBE>;
            key-positions = <4 5>;
        };

        toggle_win {
            bindings = <&tog 1>;
            key-positions = <0 9>;
        };

        screenshot_win {
            bindings = <&kp LS(LG(S))>;
            key-positions = <0 11>;
            layers = <1>;
        };

        force_quit_mac {
            bindings = <&kp LA(LG(ESCAPE))>;
            key-positions = <0 1 2>;
        };

        studio_unlock { 
            bindings = <&studio_unlock>;
            key-positions = <10 11 18 19>;
        };
    };

    macros {
        js_doc: js_doc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR &kp STAR &kp SPACE>;
            label = "JS_DOC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q             &kp W         &kp E       &kp R        &kp T      &kp Y      &kp U        &kp I       &kp O       &kp P
&hm LCTRL A       &hm LALT S    &hm LGUI D  &hs LSHFT F  &kp G      &kp H      &hs RSHFT J  &hm RGUI K  &hm RALT L  &hm RCTRL SQT
&kp Z             &kp X         &kp C       &kp V        &kp B      &kp N      &kp M        &com_scln   &pd_cln
&kp C_PLAY_PAUSE  &kp LEFT_GUI  &kp TAB     &lt 2 SPACE  &bdlt 4 0  &kp DEL  &kp ESCAPE   &mo 6
            >;
        };

        win_base {
            bindings = <
&trans      &trans  &trans       &trans  &trans  &trans  &trans  &trans       &trans  &trans
&mt LGUI A  &trans  &mt LCTRL D  &trans  &trans  &trans  &trans  &mt RCTRL K  &trans  &mt RGUI SQT
&trans      &trans  &trans       &trans  &trans  &trans  &trans  &trans       &trans
&trans      &trans  &trans       &trans  &trans  &trans  &trans  &trans
            >;
        };

        num_sym {
            bindings = <
&kp N1              &kp N2           &kp N3         &kp N4             &kp N5          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS          &kp UNDER       &kp PLUS             &kp TILDE
&mt LCTRL NUMBER_6  &hm LEFT_ALT N7  &hm LGUI N8    &hm LEFT_SHIFT N9  &kp N0          &kp LEFT_BRACKET      &hm RIGHT_SHIFT RIGHT_BRACKET  &hm RGUI MINUS  &hm RIGHT_ALT EQUAL  &mt RCTRL GRAVE
&kp KP_ENTER        &none            &kp LS(LG(S))  &kp KP_DOT         &trans          &kp LEFT_BRACE                  &kp RIGHT_BRACE                &kp LESS_THAN   &kp GREATER_THAN
&kp C_VOL_DN        &kp C_VOL_UP     &none          &trans             &lt 6 TAB       &kp RET               &trans                         &trans
            >;
        };

        win_num_sym {
            bindings = <
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans           &trans  &trans
&mt LGUI NUMBER_6  &trans  &mt LCTRL N8  &trans  &trans  &trans  &trans  &mt RCTRL MINUS  &trans  &mt RGUI GRAVE
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans           &trans
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans
            >;
        };

        nav_fn {
            bindings = <
&mt LSHIFT PG_UP            &mt LEFT_ALT HOME  &mt LC(LSHIFT) UP_ARROW  &mt LEFT_ALT END  &kp LS(LA(LC(BACKSLASH)))  &none    &kp F9        &kp F10      &kp F11           &kp F12
&mt LC(LEFT_CONTROL) PG_DN  &kp LEFT_ARROW     &kp DOWN_ARROW           &kp RIGHT_ARROW   &bksp_del                  &none    &hm RSHFT F5  &hm RGUI F6  &hm RIGHT_ALT F7  &mt RCTRL F8
&kp LG(Z)                   &kp LG(X)          &kp LG(C)                &kp LG(V)         &kp LG(LS(K))              &kp F1   &kp F2        &kp F3       &kp F4
&trans                      &trans             &trans                   &lt 6 DEL         &trans                     &kp RET  &trans        &kp FSLH
            >;
        };

        win_nav_fn {
            bindings = <
&trans     &trans     &trans     &trans     &trans         &trans  &trans  &trans        &trans  &trans
&trans     &trans     &trans     &trans     &trans         &trans  &trans  &mt LCTRL F6  &trans  &mt LGUI F8
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(K))  &trans  &trans  &trans        &trans
&trans     &trans     &trans     &trans     &trans         &trans  &trans  &trans
            >;
        };

        Admin {
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans  &trans  &trans       &trans          &sys_reset
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans  &trans  &trans       &trans          &bt BT_CLR
&kp C_VOL_DN   &kp C_VOL_UP   &kp K_MUTE     &trans         &trans         &trans  &trans  &trans       &bt BT_CLR_ALL
&bt BT_PRV     &bt BT_NXT     &trans         &trans         &trans         &trans  &trans  &bootloader
            >;

            label = "adm";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num_sym_win {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        nav_func_win {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
